import math

class Point:
    __x = int
    __y = int

    def __init__(self, x=0, y=0):
        self.__x = x
        self.__y = y

    def read(self):
        tmp = input("Nhap vao x, y: ")
        self.__x = int(tmp.split()[0])
        self.__y = int(tmp.split()[1])

    def __str__(self):
        return f"({self.__x}, {self.__y})"

    def move(self, dx=0, dy=0):
        self.__x += dx
        self.__y += dy

    def getX(self):
        return self.__x

    def getY(self):
        return self.__y

    def distance(self, *args):
        if len(args) == 0:
            return math.sqrt(self.__x ** 2 + self.__y ** 2)
        if len(args) == 1 and isinstance(args[0], Point):
            return math.sqrt((self.__x - args[0].getX())**2 + (self.__y - args[0].getY())**2)

class LineSegment:
    __d1 = Point()
    __d2 = Point()

    def __init__(self, *args):
        if len(args) == 0:
            self.__d1 = Point(8, 5)
            self.__d2 = Point(1, 0)
        elif len(args) == 2:
            if not (isinstance(args[0], Point) and isinstance(args[1], Point)):
                raise TypeError("Vui long nhap diem")
            self.__d1 = args[0]
            self.__d2 = args[1]
        elif len(args) == 4:
            if not all(isinstance(item, int) for item in args):
                raise TypeError("Chi nhap vao so nguyen")
            self.__d1 = Point(args[0], args[1])
            self.__d2 = Point(args[2], args[3])
        elif len(args) == 1:
            if not isinstance(args[0], LineSegment):
                raise TypeError("Chi 1 doan thang duoc them vao")
            self.__d1 = Point(args[0].__d1.getX(), args[0].__d1.getY())
            self.__d2 = Point(args[0].__d2.getX(), args[0].__d2.getY())

    def read(self):
        s = input("Nhap vao doan thang: ")
        self.__d1 = Point(int(s.split()[0]), int(s.split()[1]))
        self.__d2 = Point(int(s.split()[2]), int(s.split()[3]))

    def __str__(self):
        return "[({},{}); ({},{})]".format(self.__d1.getX(), self.__d1.getY(), self.__d2.getX(), self.__d2.getY())

    def move(self, dx, dy):
        self.__d1.move(dx, dy)
        self.__d2.move(dx, dy)

    def length(self):
        return self.__d1.distance(self.__d2)

    def angle(self):
        return int(math.atan2(self.__d2.getY() - self.__d1.getY(), self.__d2.getX() - self.__d1.getX()))

class LineSegmentTest:
    def testCase1(self):
        A = Point(8, 5)
        B = Point(1, 0)
        AB = LineSegment(A, B)
        print(AB)
        AB.move(7, 3)
        print(AB)

    def testCase2(self):
        CD = LineSegment(Point(1, 1), Point(4, 5))
        print("Độ dài CD: {:.2f}".format(CD.length()))

    def testCase3(self):
        danhSach = []
        n = int(input("Nhap n: "))
        for i in range(n):
            l1 = LineSegment()
            l1.read()
            danhSach.append(l1)

        print("\n--- Danh sach doan thang ---")
        for item in danhSach:
            print(item)
            print("Length: {:.2f}".format(item.length()))

        danhSach.sort(key=lambda seg: seg.length())

        print("\n--- Sau khi sap xep theo do dai ---")
        for item in danhSach:
            print(item)
            print("Length: {:.2f}".format(item.length()))

    def main(self):
        while True:
            s = input("Nhap kich ban muon chay 1/2/3/exit: ")
            if s == "1":
                self.testCase1()
            elif s == "2":
                self.testCase2()
            elif s == "3":
                self.testCase3()
            elif s == "exit":
                break

LineSegmentTest().main()
