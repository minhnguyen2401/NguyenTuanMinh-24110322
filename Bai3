import math
class Point:
  __x = int
  __y = int
  def __init__(self, x = 0, y = 1):
    self.__x = x
    self.__y = y
  def read(self):
    return f"({self.__x}, {self.__y})"
  def move(self, dx = 0, dy = 0):
    self.__x += dx
    self.__y += dy
  def getX(self):
    return self.__x
  def getY(self):
    return self.__y
  def distance(self, *args):
    if len(args) == 0:
      return math.sqrt(self.__x ** 2 + self.__y **2)
    if len(args) == 1 and isinstance(args[0], Point):
      return math.sqrt((self.__x - args[0]) * 2 + (self.__y - args[0]) * 2)

class ColorPoint(Point):
  def __init__(self, x = 0, y = 1, color = "xanh"):
    super().__init__(x, y)
    self.__color = color
  #def __init__(self, cp):
    #super().__init__(cp.getX(), cp.getY())
    #self.__color = cp.__getColor
  def read(self):
    super().read()
    self.__color = input().strip()
  def print(self):
    print(super().read() + f": {self.__color}")
  def setColor(self, color):
    self.__color = color
  def getColor(self):
    return self.__color

class C002454:
  @staticmethod
  def testCase1():
    A = ColorPoint(5, 10, "trắng")
    A.print()
  @staticmethod
  def testCase2():
    B = ColorPoint()
    B.read()
    B.move(10)
    B.print()
  @staticmethod
  def testCase3():
    C = ColorPoint(6, 3, "đen")
    D = ColorPoint(C.getX(), C.getY(), C.getColor())
    D.print()
    D.setColor("vàng")
    D.print()
    C.print()
  @staticmethod
  def main():
    print("Kịch bản 1: ")
    C002454().testCase1()
    print("\nKịch bản 2: ")
    C002454().testCase2()
    print("\nKịch bản 3: ")
    C002454().testCase3()

if __name__ == "__main__":
  C002454().main()
